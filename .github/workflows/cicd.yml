  name: CI Rally Backend API

  on:
    push:
      branches: ["master"]
    workflow_dispatch:

  env:
    IMAGE_NAME: rally-backend-api
    GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
    GCP_REGION: ${{ secrets.GCP_REGION }}
    GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    SERVICE_NAME: rally-backend-api

  jobs:
    # 1️⃣ BUILD
    build:
      name: Build Go Project
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Go
          uses: actions/setup-go@v5
          with:
            go-version: 1.24

        - name: Cache Go modules
          uses: actions/cache@v4
          with:
            path: |
              ~/.cache/go-build
              ~/go/pkg/mod
            key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-

        - name: Install swag CLI
          run: go install github.com/swaggo/swag/cmd/swag@latest

        - name: Generate Swagger docs
          run: swag init -g cmd/server/main.go -o api/docs

        # - name: Run tests (if any)
        #   run: go test ./...

        - name: Build binary
          run: go build -v ./cmd/server

        - name: Upload build artifacts
          uses: actions/upload-artifact@v4
          with:
            name: go-binary
            path: cmd/server

    # 2️⃣ PUSH IMAGE
    push:
      name: Build & Push Docker Image
      runs-on: ubuntu-latest
      needs: build
      permissions:
        contents: read
        id-token: write

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Download build artifacts
          uses: actions/download-artifact@v4
          with:
            name: go-binary
            path: cmd/server

        - name: Set up Google Cloud authentication
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ env.GCP_SA_KEY }}

        - name: Configure Docker for Artifact Registry
          run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

        - name: Build Docker image
          run: |
            IMAGE="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}"
            TAG="${GITHUB_SHA::7}"
            docker build -t "$IMAGE:latest" -t "$IMAGE:$TAG" .
            echo "IMAGE_FULL=$IMAGE:$TAG" >> $GITHUB_ENV

        - name: Ensure GAR repository exists
          run: |
            gcloud artifacts repositories describe ${{ env.IMAGE_NAME }} \
              --location=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              || gcloud artifacts repositories create ${{ env.IMAGE_NAME }} \
              --repository-format=docker \
              --location=${{ env.GCP_REGION }} \
              --description="Docker repository for ${{ env.IMAGE_NAME }} images"

        - name: Push Docker image
          run: |
            docker push "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:latest"
            docker push "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA::7}"

        - name: Upload image info
          run: echo "${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.IMAGE_NAME }}" > image.txt
        - uses: actions/upload-artifact@v4
          with:
            name: image-info
            path: image.txt

    # 3️⃣ DEPLOY
    deploy:
      name: Deploy to Cloud Run
      runs-on: ubuntu-latest
      needs: push
      permissions:
        contents: read
        id-token: write

      steps:
        - name: Download image info
          uses: actions/download-artifact@v4
          with:
            name: image-info

        - name: Set up Google Cloud authentication
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ env.GCP_SA_KEY }}

        - name: Deploy to Cloud Run
          run: |
            IMAGE_FULL=$(cat image.txt)
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image="$IMAGE_FULL" \
              --region=${{ env.GCP_REGION }} \
              --project=${{ env.GCP_PROJECT_ID }} \
              --platform=managed \
              --allow-unauthenticated \
              --port=8080 \
              --memory=512Mi \
              --max-instances=5
